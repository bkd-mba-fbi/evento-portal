!function () { var a = !1; window.JQClass = function () { }, JQClass.classes = {}, JQClass.extend = function b(c) { function g() { !a && this._init && this._init.apply(this, arguments) } var d = this.prototype; a = !0; var e = new this; a = !1; for (var f in c) e[f] = "function" == typeof c[f] && "function" == typeof d[f] ? function (a, b) { return function () { var c = this._super; this._super = function (b) { return d[a].apply(this, b || []) }; var e = b.apply(this, arguments); return this._super = c, e } }(f, c[f]) : c[f]; return g.prototype = e, g.prototype.constructor = g, g.extend = b, g } }(), function ($) { function camelCase(a) { return a.replace(/-([a-z])/g, function (a, b) { return b.toUpperCase() }) } JQClass.classes.JQPlugin = JQClass.extend({ name: "plugin", defaultOptions: {}, regionalOptions: {}, _getters: [], _getMarker: function () { return "is-" + this.name }, _init: function () { $.extend(this.defaultOptions, this.regionalOptions && this.regionalOptions[""] || {}); var a = camelCase(this.name); $[a] = this, $.fn[a] = function (b) { var c = Array.prototype.slice.call(arguments, 1); return $[a]._isNotChained(b, c) ? $[a][b].apply($[a], [this[0]].concat(c)) : this.each(function () { if ("string" == typeof b) { if ("_" === b[0] || !$[a][b]) throw "Unknown method: " + b; $[a][b].apply($[a], [this].concat(c)) } else $[a]._attach(this, b) }) } }, setDefaults: function (a) { $.extend(this.defaultOptions, a || {}) }, _isNotChained: function (a, b) { return "option" === a && (0 === b.length || 1 === b.length && "string" == typeof b[0]) || $.inArray(a, this._getters) > -1 }, _attach: function (a, b) { if (a = $(a), !a.hasClass(this._getMarker())) { a.addClass(this._getMarker()), b = $.extend({}, this.defaultOptions, this._getMetadata(a), b || {}); var c = $.extend({ name: this.name, elem: a, options: b }, this._instSettings(a, b)); a.data(this.name, c), this._postAttach(a, c), this.option(a, b) } }, _instSettings: function (a, b) { return {} }, _postAttach: function (a, b) { }, _getMetadata: function (elem) { try { var data = elem.data(this.name.toLowerCase()) || ""; data = data.replace(/'/g, '"'), data = data.replace(/([a-zA-Z0-9]+):/g, function (a, b, c) { var d = data.substring(0, c).match(/"/g); return d && d.length % 2 !== 0 ? b + ":" : '"' + b + '":' }), data = $.parseJSON("{" + data + "}"); for (var name in data) { var value = data[name]; "string" == typeof value && value.match(/^new Date\((.*)\)$/) && (data[name] = eval(value)) } return data } catch (a) { return {} } }, _getInst: function (a) { return $(a).data(this.name) || {} }, option: function (a, b, c) { a = $(a); var d = a.data(this.name); if (!b || "string" == typeof b && null == c) { var e = (d || {}).options; return e && b ? e[b] : e } if (a.hasClass(this._getMarker())) { var e = b || {}; "string" == typeof b && (e = {}, e[b] = c), this._optionsChanged(a, d, e), $.extend(d.options, e) } }, _optionsChanged: function (a, b, c) { }, destroy: function (a) { a = $(a), a.hasClass(this._getMarker()) && (this._preDestroy(a, this._getInst(a)), a.removeData(this.name).removeClass(this._getMarker())) }, _preDestroy: function (a, b) { } }), $.JQPlugin = { createPlugin: function (a, b) { "object" == typeof a && (b = a, a = "JQPlugin"), a = camelCase(a); var c = camelCase(b.name); JQClass.classes[c] = JQClass.classes[a].extend(b), new JQClass.classes[c] } } }(jQuery);